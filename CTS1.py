#!/usr/bin/env python2.7
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Nov 23, 2018 10:16:19 PM CST  platform: Linux
import subprocess, os, string ,ttk ,time
import requests
import json
#from requests.packages import urllib3
try:
	from Tkinter import *
	from tkMessageBox import *
except ImportError:
	from tkinter import *

deviceID = {}
modelName = {}
fingerPrint = {}
serials = {}
itemsforlistbox = {}
#FPforpasring = ""
webservices= {'query_fingerprint_existed':{'func_id': 0,'return_type':'int'},
			  'post_submission_event':{'func_id': 1, 'return_type':'json'},
			  'query_submission_info':{'func_id': 2, 'return_type': 'json'}
}

class MyFirstGUI:
	def __init__(self, master):
		self.master = master
		screen_width = root.winfo_screenwidth()
		print(screen_width)
		screen_height = root.winfo_screenheight()
		window_size = 	str(1024)+"x"+str(768)+"+0+0"
		print(screen_height)
		master.title("A simple GUI")
		master.geometry(window_size)
		master.title("3PL Auto Tool")
		master.configure(highlightcolor="black")

		self.CtsSettingsLabel = Label(master)
		self.CtsSettingsLabel.place(x=520, y=350)
		self.CtsSettingsLabel.configure(justify=LEFT ,text='''          		**************CTS Settings**************
	1) Settings > Wi-Fi (Connect to a Wi-Fi network that supports IPv6)
	2) Settings > Display > Sleep = '30 min'
	3) Settings > Location > On (High accuracy)
	4) Settings > Security > Screen lock > None 
	5) Settings > Security > Device administrators > any preloaded 
	device administrators remain disabled
	6) Settings > Language & input > Language (United States)
	7) Settings > Date & time > Time zone > Los Angeles or Pacific Time 
	8) Settings > Date & time > Use 24-hour format > Off
	9) Settings > Developer options > Stay Awake
	10) Settings > Developer options > USB debugging
	11) Settings > Developer options > Verify apps over USB > Off ''')
		

		self.ctsButton = Radiobutton(master,text="CTS", value=0, command=self.CTS)
		self.ctsButton.place(x=792, y=50, height=28, width=80)
		self.ctsButton.configure(text='''CTS''')

		self.gtsRadiobutton = Radiobutton(master,text="GTS", value=1, command=self.GTS)
		self.gtsRadiobutton.place(x=792, y=80, height=28, width=80)
		self.gtsRadiobutton.configure(text='''GTS''')

		self.GSIButton = Radiobutton(master,text="GSI", value=2, command=self.GSI)
		self.GSIButton.place(x=792, y=110, height=28, width=80)
		self.GSIButton.configure(text='''GSI''')

		self.vtsRadiobutton = Radiobutton(master, text="VTS", value=3, command=self.VTS)
		self.vtsRadiobutton.place(x=792, y=140, height=28, width=80)
		self.vtsRadiobutton.configure(text='''VTS''')
		self.vtsRadiobutton.configure(width=81)

		self.stsRadiobutton = Radiobutton(master, text="STS", value=4, command=self.STS)
		self.stsRadiobutton.place(x=792, y=170, height=28, width=80)
		self.stsRadiobutton.configure(text='''STS''')
		self.stsRadiobutton.configure(width=71)

		self.instantRadiobutton = Radiobutton(master, text="INSTANT", value=5, command=self.INSTANT )
		self.instantRadiobutton.place(x=792, y=200, height=28, width=80)
		self.instantRadiobutton.configure(text='''INSTANT''')


		self.serialLabel = Label(master)
		self.serialLabel.place(x=10, y=30, height=18, width=37)
		self.serialLabel.configure(activebackground="#f9f9f9")
		self.serialLabel.configure(text='''Serial''')
		
		self.serialListbox = Listbox(master,exportselection=0,selectmode=MULTIPLE)
		self.serialListbox.place(x=10, y=50, height=214, width=134)
		self.serialListbox.configure(background="white")
		self.serialListbox.configure(font="TkFixedFont")
		self.serialListbox.configure(selectbackground="#c4c4c4")
		self.serialListbox.configure(width=94)

	#    self.modelLabel = Label(master)
	#    self.modelLabel.place(x=115, y=33, height=18, width=37)
	#    self.modelLabel.configure(activebackground="#f9f9f9")
	#    self.modelLabel.configure(text='''Model''')

		self.modelListbox = Listbox(master)
		self.modelListbox.place(x=124, y=50, height=0, width=0) #暫不需要隱藏
		self.modelListbox.configure(background="white")
		self.modelListbox.configure(font="TkFixedFont")
		self.modelListbox.configure(selectbackground="#c4c4c4")
		self.modelListbox.configure(width=314)
		
		self.fingerprintLabel = Label(master)
		self.fingerprintLabel.place(x=140, y=30, height=18, width=76)
		self.fingerprintLabel.configure(activebackground="#f9f9f9")
		self.fingerprintLabel.configure(text='''Fingerprint''')

		self.fingerprintListbox = Listbox(master)
		self.fingerprintListbox.place(x=143, y=50, height=214, width=550)
		self.fingerprintListbox.configure(background="white")
		self.fingerprintListbox.configure(font="TkFixedFont")
		self.fingerprintListbox.configure(selectbackground="#c4c4c4")
		self.fingerprintListbox.configure(width=314)

		self.versionLabel = Label(master)
		self.versionLabel.place(x=700, y=30, height=18, width=48)
		self.versionLabel.configure(text='''Version''')

		self.versionListbox = Listbox(master)
		self.versionListbox.place(x=693, y=50, height=214, width=110)
		self.versionListbox.configure(background="white")
		self.versionListbox.configure(font="TkFixedFont")
		self.versionListbox.configure(width=54)

		self.toolLabel = Label(master)
		self.toolLabel.place(x=800, y=30, height=18, width=38)
		self.toolLabel.configure(text='''Tool''')
		self.toolLabel.configure(width=38)

		self.startButton = Button(master, command=self.Start)
		self.startButton.place(x=880, y=50, height=140, width=120)
		self.startButton.configure(text='Start' ,font=30)




		self.comboxlist = ttk.Combobox(master)
		self.comboxlist["values"]=("All","1920","1280","720","480","images")
		self.comboxlist.place(x=20, y=330, height=28, width=52)
		self.comboxlist.configure(text='''VPN''')

		self.clearButton = Button(master, command=self.clear)
		self.clearButton.place(x=580, y=620, height=70, width=100)
		self.clearButton.configure(text='''Clear''')


		self.AutoSetupButton = Button(master, command=self.AutoSetup)
		self.AutoSetupButton.place(x=900, y=620, height=70, width=100)
		self.AutoSetupButton.configure(text='''Auto Setup''')
		  


		self.gpsButton =Button (master, command=self.greet)
		self.gpsButton.place(x=90, y=330, height=28, width=52)
		self.gpsButton.configure(text='''Media''')

		self.SelectCheckButton = Button(master, command=self.selectToolVersion)
		self.SelectCheckButton.place(x=160, y=330, height=28, width=80)
		self.SelectCheckButton.configure(text='''SelectCheck''')
		
		self.devicesButton = Button(master, command=self.checkList)
		self.devicesButton.place(x=30, y=270, height=28, width=80)
		self.devicesButton.configure(text='''Devices''')

		self.mesListbox = Text(master)
		self.mesListbox.place(x=20, y=355 , height=500, width=550)
		self.mesListbox.configure(background="white")
		self.mesListbox.configure(font="TkFixedFont")
		self.mesListbox.configure(width=314)



		self.Wificomboxlist = ttk.Combobox(master)
		self.Wificomboxlist["values"]=("WiFi_1","WiFi_2","WiFi_3")
		self.Wificomboxlist.current(0)
		self.Wificomboxlist.place(x=802, y=230, height=20, width=90)

  

		#self.mesmessagebox = messagebox( master )
	def hit_me():
		print("12345")
		print(tk.messagebox.askquestion(title='Hi', message='hahahaha'))

	def Media(self):
		print("12345")
		print(tk.messagebox.askquestion(title='Hi', message='hahahaha'))



	def AutoSetup(self):



		if serials == {}:
			showinfo(message='Please select devices')

		


		#self.ccomboxlist.curselection()
		Wificomboxlist = str(self.Wificomboxlist.get())
		print("sadasd"+ Wificomboxlist)

		if Wificomboxlist == "WiFi_1":
			Wificomboxlist = "0"
			print("WiFi_1")
		elif Wificomboxlist == "WiFi_2":
			Wificomboxlist = "1"
			print("WiFi_2")
		elif Wificomboxlist == "WiFi_3":
			Wificomboxlist = "2"
			print("WiFi_3")
		serialString  = ""
		for i in serials:
			serialString =serials[i]


		#sample =('gnome-terminal -e " python /CTS_tool/for_pythonUI/test/DeviceSetup.py "')+"serial:"+str(serialString.split())
		#	sample =(" python /CTS_tool/for_pythonUI/test/DeviceSetup.py ")+"serial:"+str(serialString)+" SSID:CTS_GSI"+" PSK:01111111"
			sample =(" python /CTS_tool/for_pythonUI/DeviceSetup.py ")+"serial:"+str(serialString)+" SSID:"+str(Wificomboxlist)

			subprocess.Popen(sample, shell=True)
		print sample


		serials.clear()


	def clear(self):

		self.mesListbox.delete(1.0, END)
		self.versionListbox.delete(0, 15)
		serials.clear()
		deviceID.clear()

#    		subprocess.Popen(sample, shell=True)
 #   	print sample
		#self.sample_code()
		#print "44444"
		
	#	modelName.clear()
	#	fingerPrint.clear()
	#	itemsforlistbox.clear()

	def greet(self):
		FPforpython =  "python3 /home/pega/for_pythonUI/pasring_test2.py"  + " "+FPforpasring 
		shellscript = subprocess.check_output(FPforpython , shell=True)
		#FPforpython = "123456"
		#FPforpython = subprocess.Popen(FPforpython + "python3 /home/pega/for_pythonUI/pasring_test2.py" , shell=False)
		self.mesListbox.insert(END,str(shellscript))
		#print(shellscript.split("\n")[0].split(" ")[1],shellscript.split("\n")[0])
		shellscript=shellscript.split("\n") #list
		print(len(shellscript))
		print(shellscript)
		ss=(len(shellscript))
		for i in shellscript:
			print(i)
			#print(i.split("\n")[0].split(" ")[1])
			if i.split("\n")[0].split(" ")[0] == "CTS":
				CTSToolVersion = i.split("\n")[0].split(" ")[1]
			elif i.split("\n")[0].split(" ")[0] == "GTS":
				GTSToolVersion = i.split("\n")[0].split(" ")[1]
			elif i.split("\n")[0].split(" ")[0] == "VTS":
				VTSToolVersion = i.split("\n")[0].split(" ")[1]
			elif i.split("\n")[0].split(" ")[0] == "CTS-ON-GSI":
				CTSONGSIToolVersion = i.split("\n")[0].split(" ")[1]								
			elif i.split("\n")[0].split(" ")[0] == "STS":
				STSToolVersion = i.split("\n")[0].split(" ")[1]
			elif i.split("\n")[0].split(" ")[0] == "CTS-INSTANT":
				INSTANTToolVersion = i.split("\n")[0].split(" ")[1]				
			
		print("CTS:" + CTSToolVersion.split("(")[1].split(")")[0])
		print("GTS:" + GTSToolVersion.split("(")[1].split(")")[0])
		print("VTS:" + VTSToolVersion.split("(")[1].split(")")[0])
		print("CTS-ON-GSI:" + CTSONGSIToolVersion.split("(")[1].split(")")[0])
		print("CTS:" + CTSToolVersion.split("(")[1].split(")")[0])
		print("STS:" + STSToolVersion.split("(")[1].split(")")[0])
		print("INSTANTT:" + INSTANTToolVersion.split("(")[1].split(")")[0])


		
	def selectSerial(self):
		ids = self.serialListbox.curselection()
		for i in ids:
			value = self.serialListbox.get(i)
			print(" i:{} value:{}".format(i,'value'))
			serials[i] = value
		
	def selectToolVersion(self):
		####################選擇device 顯示資訊#######################################

		self.mesListbox.delete(1.0, END)
		serials.clear()
		deviceID.clear()
		ids = self.serialListbox.curselection()
		for i in ids:
			value = self.serialListbox.get(i)
			serials[i] = value
			self.mesListbox.insert(END,"Serials : " + serials[i] + "\n" )
		self.mesListbox.insert(END,"FingerPrint :" + fingerPrint[i] + "\n")		
		self.mesListbox.insert(END,"Model :" + modelName[i] + "\n")		
		FPforpasring = fingerPrint[i]
		global FPforpasring
		sdk = subprocess.check_output(
			str("adb -s " + self.serialListbox.get(i) + " shell getprop ro.build.version.sdk").split()).replace("\n","").strip().replace(" ", " ")
		global sdk	
		self.mesListbox.insert(END,"SDK Version :" + sdk +"\n")
		



	def checkList(self):

		command = ['/usr/bin/which', 'adb']
		adb = subprocess.check_output('/usr/bin/which adb', stderr=subprocess.STDOUT, shell=True)
		print(adb)
		devices = subprocess.check_output('adb devices'.split())[25:]
		print(devices)
		global deviceAmount
		deviceAmount = len(devices.split()) / 2
		i = 0
		while i < deviceAmount:
			k = i * 2
			deviceID[i] = devices.split()[k]
			modelName[i] = subprocess.check_output(
				str("adb -s " + deviceID[i] + " shell getprop ro.product.vendor.model").split()).replace("\r\n","").strip().replace(" ", " ")
			if modelName[i] == "":
				modelName[i] = subprocess.check_output(
				str("adb -s " + deviceID[i] + " shell getprop ro.product.model").split()).replace("\r\n","").strip().replace(" ", " ")
			fingerPrint[i] = subprocess.check_output(
				str("adb -s " + deviceID[i] + " shell getprop ro.vendor.build.fingerprint").split()).replace("\r\n","").strip().replace(" ", " ")
			if fingerPrint[i] =="": 
				fingerPrint[i] = subprocess.check_output(
				str("adb -s " + deviceID[i] + " shell getprop ro.build.fingerprint").split()).replace("\r\n","").strip().replace(" ", " ")
			print modelName #, fingerPrint[i] 
			i += 1	

		self.serialListbox.delete(0, 15)
		for i in range(deviceAmount):
			self.serialListbox.insert(i, deviceID[i])
		self.modelListbox.delete(0, 15)
		for i in range(deviceAmount):
			self.modelListbox.insert(i, modelName[i])
		self.fingerprintListbox.delete(0, 15)
		for i in range(deviceAmount):
			self.fingerprintListbox.insert(i, fingerPrint[i])

	def Start(self):

		global selectToolVersion
		selectToolVersion = ""
		serialString  = ""
		global GtsLocal
		GtsLocal=""

		if serials == {}:
			showinfo(message='Please select devices')
			self.versionListbox.delete(0, 15)

		else :
			for i in serials: 
				serialString = serialString +" -s "+ serials[i]

		##################versionListbox選擇版本#######################
		for i in self.versionListbox.curselection():

			self.mesListbox.delete(END, 1.0)
			value = self.versionListbox.get(i)
			self.mesListbox.insert(END, value + "\n" )
			selectToolVersion =value


			print selectToolVersion.split("-",  )[0]  #顯示選擇tool
		if selectToolVersion == "":
			showinfo(message='Please select Tool Version')

		ToolVersion = selectToolVersion.split("-",)[1]
		print "ToolVersion:" + ToolVersion
		ToolVersion = " -v " + selectToolVersion.split("-",)[0] + " -v " + selectToolVersion.split("-",)[1]

		



		if str(selectToolVersion.split("-",)[0]) == "GTS":
			serialCommand =["/CTS_tool/for_pythonUI/GTS20190227_forpython.sh"]
					#############################GTS Media Local########################################
			GtsLocal=selectToolVersion.split("-",)[2]
			if GtsLocal == " ":
				GtsLocal= " -m  '  ' "
			else :
				GtsLocal = "-m " + (str(GtsLocal))

		elif str(selectToolVersion.split("-",)[0]) == "CTS":
			serialCommand =["/CTS_tool/for_pythonUI/CTS_full_test_script_20190110_forpython.sh"]
		elif str(selectToolVersion.split("-",)[0]) == "VTS":
			serialCommand =["/CTS_tool/for_pythonUI/VTS20190110_forpython.sh"]
		elif str(selectToolVersion.split("-",)[0]) == "GSI":
			serialCommand =["/CTS_tool/for_pythonUI/VTS20190110_forpython.sh"]
		elif str(selectToolVersion.split("-",)[0]) == "INSTANT":
			serialCommand =["/CTS_tool/for_pythonUI/INSTANT_20181220_forpython.sh"]
		elif str(selectToolVersion.split("-",)[0]) == "STS":
			ToolVersion= ""
			serialCommand =["/CTS_tool/for_pythonUI/STS_20181220_forpython.sh"]
		self.AutoSetup()
		time.sleep(3)
		serialCommand = serialCommand  + ToolVersion.split() + serialString.split()  + GtsLocal.split()
		shellscript = subprocess.Popen(serialCommand , shell=False)
		print serialCommand 

		serials.clear() #清除array

	def CTS(self):
		self.versionListbox.delete(0, 15)	
		if sdk == "27": #8.1
			itemsforlistbox=['CTS-8.1_r16','CTS-8.1_r17']
		elif sdk == "29": #10.0
			itemsforlistbox=['CTS-10_r1','CTS-10_r2']
		elif sdk == "28": #9.0
			itemsforlistbox=['CTS-9.0_r9','CTS-9.0_r10']
		elif sdk == "26": #8.0
			itemsforlistbox=['CTS-8.0_r20','CTS-8.0_r21']
		elif sdk == "25": #7.1
			itemsforlistbox=['CTS-7.1_r28','CTS-7.1_r29']
		elif sdk == "24": #7.0
			itemsforlistbox=['CTS-7.0_r32','CTS-7.0_r33']
		elif sdk == "23": #6.0
			itemsforlistbox=['CTS-6.0_r32']
		elif sdk == "22": #5.1
			itemsforlistbox=['CTS-5.1_r28']
		for i in range (len(itemsforlistbox)):
			self.versionListbox.insert(i, itemsforlistbox[i])
		


	def GTS(self):
		toolversion = self.serialListbox.curselection()
		if sdk == "22": #5.1
			itemsforlistbox=['GTS-5.0r2- ']
		elif sdk == "23": #6.0
			itemsforlistbox=['GTS-6.0r1- ']
		elif sdk == "24": #7.0
			itemsforlistbox=['GTS-7.0r2- ','GTS-7.0r2-Local']
		elif sdk == "25": #7.1
			itemsforlistbox=['GTS-7.0r2- ','GTS-7.0r2-Local']
		else:
			itemsforlistbox=['GTS-7.0r2- ','GTS-7.0r3- ','GTS-7.0r2-Local','GTS-7.0r3-Local']
		self.versionListbox.delete(0, 15)
	#	self.mesListbox.insert(END,'GTS')
		for i in range (len(itemsforlistbox)):
			self.versionListbox.insert(i, itemsforlistbox[i])

	def VTS(self):
		self.versionListbox.delete(0, 15)	
		if sdk == "27": #8.1
			itemsforlistbox=['VTS-8.1_r9','VTS-8.1_r10']
		elif sdk == "28": #9.0
			itemsforlistbox=['VTS-9.0_r10','VTS-9.0_r11']
		elif sdk == "26": #8.0
			itemsforlistbox=['VTS-8.0_r12','VTS-8.0_r13']
		for i in range (len(itemsforlistbox)):
			self.versionListbox.insert(i, itemsforlistbox[i])


	def GSI(self):
		self.versionListbox.delete(0, 15)	
		if sdk == "27": #8.1
			itemsforlistbox=['GSI-8.1_r9','GSI-8.1_r10','GSI-8.1_r11']
		elif sdk == "28": #9.0
			itemsforlistbox=['GSI-9.0_r10','GSI-9.0_r11']
		elif sdk == "26": #8.0
			itemsforlistbox=['GSI-8.0_r20','GSI-8.0_r21']
		for i in range (len(itemsforlistbox)):
			self.versionListbox.insert(i, itemsforlistbox[i])

	def STS(self):
		itemsforlistbox=['STS- ']
		self.versionListbox.delete(0, 15)
		#self.mesListbox.insert(END,'STS')
		for i in range (len(itemsforlistbox)):
			self.versionListbox.insert(i, itemsforlistbox[i])
	def INSTANT(self):
		if sdk == "28": #9.0
			itemsforlistbox=['INSTANT-9.0_r8','INSTANT-9.0_r9','INSTANT-9.0_r10']
		self.versionListbox.delete(0, 15)
		for i in range (len(itemsforlistbox)):
			self.versionListbox.insert(i, itemsforlistbox[i])

	#def DeviceSetip(self)
	#	for i in ids:
	#		value = self.serialListbox.get(i)
	#		serials[i] = value
	#		self.mesListbox.insert(END,"Serials : " + serials[i] + "\n" )		





root = Tk()
my_gui = MyFirstGUI(root)
root.mainloop()
